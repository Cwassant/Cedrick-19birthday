<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Happy Birthday!</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="container">
    <p id="intro" class="intro">
      Here's a virtual cake because you're very against me spending money TuT<br>
      <strong>but if you want a real one, YOU CAN STILL ASK â™¥ï¸Ž</strong>
    </p>

    <div class="cake">
      <div class="layer layer-bottom"></div>
      <div class="layer layer-middle"></div>
      <div class="layer layer-top"></div>
      <div class="candles">
        <div class="candle"><div class="flame"></div></div>
        <div class="candle"><div class="flame"></div></div>
        <div class="candle"><div class="flame"></div></div>
      </div>
    </div>

    <div class="button-group">
      <button id="startBtn" onclick="startSequence()">Start</button>
      <button id="restartBtn" onclick="reset()" style="display:none;">Again?</button>
    </div>

    <div id="countdown"></div>
    <div id="message"></div>

    <canvas id="fireworks"></canvas>
  </div>

  <script src="script.js"></script>
</body>
</html>

const canvas = document.getElementById('fireworks');
const ctx = canvas.getContext('2d');
const countdownEl = document.getElementById('countdown');
const messageEl = document.getElementById('message');
const startBtn = document.getElementById('startBtn');
const restartBtn = document.getElementById('restartBtn');
const flames = document.querySelectorAll('.flame');
const intro = document.getElementById('intro');
const originalIntroHTML = intro.innerHTML;
let countdownInterval;

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
canvas.style.opacity = 0;

function startSequence() {
  startBtn.style.display = 'none';
  let count = 3;
  countdownEl.textContent = `Blow candles in ${count}...`;

  clearInterval(countdownInterval);

  countdownInterval = setInterval(() => {
    count--;
    if (count > 0) {
      countdownEl.textContent = `Blow candles in ${count}...`;
    } else {
      clearInterval(countdownInterval);
      countdownEl.textContent = '';
      blowCandles();
    }
  }, 1000);
}

function blowCandles() {
  flames.forEach(f => f.style.display = 'none');
  messageEl.textContent = 'ðŸŽ‰ Happy Birthday!!! ðŸŽ‰';
  launchFireworks();

  // Fade out intro
  setTimeout(() => {
    intro.style.opacity = 0;
  }, 1500);

  // Replace with love message
  setTimeout(() => {
    intro.innerHTML = "I love youuuu soooo much, let's spend the next one together!";
    intro.style.opacity = 1;
  }, 2500);

  // Show replay button
  setTimeout(() => {
    restartBtn.style.display = 'inline-block';
  }, 4000);
}

function reset() {
  clearInterval(countdownInterval);
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  canvas.style.opacity = 0;
  messageEl.textContent = '';
  countdownEl.textContent = '';
  restartBtn.style.display = 'none';
  startBtn.style.display = 'inline-block';
  flames.forEach(f => f.style.display = 'block');
  intro.innerHTML = originalIntroHTML;
  intro.style.opacity = 1;
}

function launchFireworks() {
  canvas.style.opacity = 1;
  for (let i = 0; i < 60; i++) {
    const x = Math.random() * canvas.width;
    const y = Math.random() * canvas.height / 2;
    const color = `hsl(${Math.random() * 360}, 60%, 85%)`;
    drawBurst(x, y, color);
  }
}

function drawBurst(x, y, color) {
  const radius = 2 + Math.random() * 4;
  const particles = 25;
  for (let i = 0; i < particles; i++) {
    const angle = Math.random() * 2 * Math.PI;
    const speed = Math.random() * 4 + 2;
    const vx = Math.cos(angle) * speed;
    const vy = Math.sin(angle) * speed;
    animateParticle(x, y, vx, vy, color, radius);
  }
}

function animateParticle(x, y, vx, vy, color, radius) {
  let alpha = 1;
  const fade = 0.02;
  function frame() {
    if (alpha <= 0) return;
    ctx.fillStyle = `rgba(31,16,37,0.15)`;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = color;
    ctx.globalAlpha = alpha;
    ctx.fill();
    ctx.globalAlpha = 1;
    x += vx;
    y += vy;
    vy += 0.1;
    alpha -= fade;
    requestAnimationFrame(frame);
  }
  frame();
}


body {
  margin: 0;
  background: #1f1025;
  color: #f8e1ff;
  font-family: 'Segoe UI', sans-serif;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 30px;
  max-width: 600px;
}

.intro {
  font-size: 1.2em;
  color: #e5c1ff;
  line-height: 1.6;
  margin-bottom: 30px;
  transition: opacity 1s ease;
  opacity: 1;
}

.cake {
  position: relative;
  width: 150px;
  margin: 40px auto;
  height: 180px;
}

.layer {
  border-radius: 8px;
  width: 100%;
  height: 40px;
  background: #a066c8;
  margin: 5px 0;
  box-shadow: 0 0 10px #dcb6f6;
}

.layer-bottom {
  background: #8645a5;
}
.layer-middle {
  background: #a066c8;
}
.layer-top {
  background: #c08cff;
}

.candles {
  position: absolute;
  top: -40px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 20px;
}

.candle {
  width: 10px;
  height: 30px;
  background: #fff;
  border-radius: 2px;
  position: relative;
}

.flame {
  width: 8px;
  height: 12px;
  background: orange;
  border-radius: 50%;
  position: absolute;
  top: -14px;
  left: 1px;
  animation: flicker 0.3s infinite;
  box-shadow: 0 0 10px #ff99ff;
}

@keyframes flicker {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1); }
}

.button-group button {
  background: #ba68c8;
  color: white;
  border: none;
  padding: 10px 20px;
  font-size: 1em;
  margin: 20px;
  cursor: pointer;
  border-radius: 8px;
  box-shadow: 0 0 10px #cda9ff;
}

#countdown {
  font-size: 2em;
  color: #e9d2ff;
  margin-top: 30px;
}

#message {
  font-size: 2em;
  color: #ffccff;
  margin-top: 30px;
  text-shadow: 0 0 10px #fff;
}

#fireworks {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none; 
  z-index: -1;
  opacity: 0;
  transition: opacity 1s ease;
}
